'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { BookResult } from '@/lib/services/google-books';
import { Checkbox } from '@/components/ui/Checkbox';

interface BookCardProps {
  book: BookResult;
  isSelected: boolean;
  onToggleSelect: (book: BookResult) => void;
  onClick?: (book: BookResult) => void;
}

export const BookCard: React.FC<BookCardProps> = ({
  book,
  isSelected,
  onToggleSelect,
  onClick,
}) => {
  const router = useRouter();
  const [imageError, setImageError] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);
  
  const handleCardClick = () => {
    if (onClick) {
      onClick(book);
    } else {
      router.push(`/books/${book.id}`);
    }
  };

  // Get best available image URL - prefer higher quality
  const getImageUrl = () => {
    if (!book.imageLinks) return null;
    // Prefer higher quality images - use large or extraLarge for better quality
    return book.imageLinks.large || book.imageLinks.extraLarge || book.imageLinks.medium || book.imageLinks.small || book.imageLinks.thumbnail;
  };

  const imageUrl = getImageUrl();
  const hasImage = imageUrl && !imageError;

  return (
    <div
      className={`group relative cursor-pointer transition-all duration-200 ${isSelected ? 'ring-2 ring-yellow-400 rounded-lg' : ''}`}
      onClick={handleCardClick}
    >
      {/* Selection Checkbox */}
      <div 
        className="absolute top-2 left-2 z-20"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="bg-black/70 rounded p-1">
          <Checkbox
            checked={isSelected}
            onChange={() => onToggleSelect(book)}
            className="cursor-pointer"
          />
        </div>
      </div>

      {/* Book Cover Container */}
      <div className="relative w-full aspect-[2/3] overflow-hidden rounded-lg mb-3 bg-gray-200 dark:bg-gray-900">
        {hasImage ? (
          <>
            {/* Loading placeholder */}
            {!imageLoaded && (
              <div className="absolute inset-0 flex items-center justify-center bg-gray-300 dark:bg-gray-800">
                <div className="text-gray-500 dark:text-gray-600 animate-pulse">üìö</div>
              </div>
            )}
            
            {/* Actual Image */}
            <img
              src={`/api/proxy-image?url=${encodeURIComponent(imageUrl)}`}
              alt={book.title}
              className={`w-full h-full object-cover transition-all duration-300 ${
                imageLoaded ? 'opacity-100 group-hover:scale-105' : 'opacity-0'
              }`}
              onLoad={() => setImageLoaded(true)}
              onError={() => {
                console.error('Failed to load image:', imageUrl);
                setImageError(true);
              }}
              loading="lazy"
            />
          </>
        ) : (
          // Fallback when no image
          <div className="absolute inset-0 flex flex-col items-center justify-center bg-gray-300 dark:bg-gray-800 border-2 border-yellow-400/20">
            <div className="text-5xl mb-2">üìñ</div>
            <div className="text-xs text-gray-600 dark:text-gray-500 font-medium">No Cover</div>
          </div>
        )}

        {/* Rating Badge */}
        {book.averageRating && (
          <div className="absolute top-2 right-2 bg-yellow-400 text-black text-xs font-bold px-2 py-1 rounded shadow-lg z-10">
            ‚≠ê {book.averageRating.toFixed(1)}
          </div>
        )}

        {/* Hover Overlay */}
        <div className="absolute inset-0 bg-black/0 group-hover:bg-black/60 transition-all duration-200 flex items-center justify-center">
          <button
            onClick={(e) => {
              e.stopPropagation();
              onToggleSelect(book);
            }}
            className="opacity-0 group-hover:opacity-100 bg-yellow-400 hover:bg-yellow-300 text-black font-semibold px-6 py-2 rounded-lg transition-all duration-200 transform group-hover:scale-100 scale-90"
          >
            {isSelected ? '‚úì Selected' : 'Select'}
          </button>
        </div>
      </div>

      {/* Book Info */}
      <div className="space-y-1">
        <h3 className="font-semibold text-sm text-gray-900 dark:text-white group-hover:text-yellow-600 dark:group-hover:text-yellow-400 transition-colors line-clamp-2 leading-tight">
          {book.title}
        </h3>
        
        {book.authors && book.authors.length > 0 && (
          <p className="text-xs text-gray-600 dark:text-gray-400 truncate">
            {book.authors.join(', ')}
          </p>
        )}
        
        {book.publishedDate && (
          <p className="text-xs text-gray-500 dark:text-gray-500">
            {new Date(book.publishedDate).getFullYear()}
          </p>
        )}
      </div>
    </div>
  );
};
